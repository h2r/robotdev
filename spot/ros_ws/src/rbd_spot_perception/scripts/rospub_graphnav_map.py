# Publishes a given GraphNav map as a ROS message. Or,
# obtains the GraphNav map from the currently running
# GraphNav map service.
#
# The map is published as a point cloud.
import os
import argparse
import rbd_spot_perception.mapping as mapping

def main():
    parser = argparse.ArgumentParser("publishes graphnav map as ROS message")
    parser.add_argument("-p", "--path", type=str, help="path to saved graphnav map. This"
                        "should be the folder generated by the graphnav_command_line example"
                        "that contains a 'graph' file.")
    parser.add_argument("--current", help="obtains the graphnav map from current GraphNav service.")
    args = parser.parse_args()

    if args.path is not None:
        (current_graph, current_waypoints, current_waypoint_snapshots, current_edge_snapshots,
         current_anchors, current_anchored_world_objects) = mapping.load_map(args.path)

        # Concatenate the data from all waypoints.
        data = None  # will be a 3XN numpy array
        for wp in current_graph.waypoints:
            cloud_data = mapping.get_point_cloud_data_in_seed_frame(
                current_waypoints, current_waypoint_snapshots, current_anchors, wp.id)
            if data is None:
                data = cloud_data
            else:
                data = np.concatenate((data, cloud_data))

        # publish this numpy array as point cloud


    elif args.current:
        print("not yet supported")
    else:
        print("Nothing to do. You want to specify -p <path> or --current")

if __name__ == "__main__":
    main()
